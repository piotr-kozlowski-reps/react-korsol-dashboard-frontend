import * as React from "react";

import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";

type Company = {
  id: string;
  name: string;
};

const defaultData: Company[] = [
  {
    id: "f1efe069-d5a3-497b-89f9-3b63cfd414fe",
    name: "Eimbee",
  },
  {
    id: "612a1237-d8fe-4784-af8e-99311a65a7ed",
    name: "Tavu",
  },
  {
    id: "3836f0af-98ca-42a6-aabb-96cffd64bd71",
    name: "Trudeo",
  },
  {
    id: "db2fef34-9e86-4e7c-b331-acc20326ca80",
    name: "Fivechat",
  },
  {
    id: "2c83f2e5-faa3-4313-92e4-8ad2fcba4c5e",
    name: "Twitternation",
  },
  {
    id: "1a60fe1a-aeef-49f4-8cc1-1f466abdcc07",
    name: "Skinte",
  },
];

const columnHelper = createColumnHelper<Company>();

const columns = [
  columnHelper.accessor("name", {
    header: () => "firma",
    cell: (name) => name.getValue(),
  }),
];

export function TestTable() {
  const [data, setData] = React.useState(() => [...defaultData]);
  const rerender = React.useReducer(() => ({}), {})[1];

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div className="p-2">
      <table>
        <thead>
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map((header) => (
                <th key={header.id}>
                  {header.isPlaceholder
                    ? null
                    : flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody>
          {table.getRowModel().rows.map((row) => (
            <tr key={row.id}>
              {row.getVisibleCells().map((cell) => (
                <td key={cell.id}>
                  {flexRender(cell.column.columnDef.cell, cell.getContext())}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
        <tfoot>
          {table.getFooterGroups().map((footerGroup) => (
            <tr key={footerGroup.id}>
              {footerGroup.headers.map((header) => (
                <th key={header.id}>
                  {header.isPlaceholder
                    ? null
                    : flexRender(
                        header.column.columnDef.footer,
                        header.getContext()
                      )}
                </th>
              ))}
            </tr>
          ))}
        </tfoot>
      </table>
      <div className="h-4" />
      <button onClick={() => rerender()} className="border p-2">
        Rerender
      </button>
    </div>
  );
}
